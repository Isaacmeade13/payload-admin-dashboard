/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    owners: OwnerAuthOperations;
    admins: AdminAuthOperations;
  };
  collections: {
    'venue-bookings-requests': VenueBookingsRequest;
    'new-venue-requests': NewVenueRequest;
    venues: Venue;
    owners: Owner;
    activities: Activity;
    tags: Tag;
    'tag-groups': TagGroup;
    'gallery-media': GalleryMedia;
    'logo-images': LogoImage;
    'map-images': MapImage;
    locations: Location;
    currencies: Currency;
    admins: Admin;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    owners: {
      venues: 'venues';
    };
    'tag-groups': {
      tags: 'tags';
    };
  };
  collectionsSelect: {
    'venue-bookings-requests': VenueBookingsRequestsSelect<false> | VenueBookingsRequestsSelect<true>;
    'new-venue-requests': NewVenueRequestsSelect<false> | NewVenueRequestsSelect<true>;
    venues: VenuesSelect<false> | VenuesSelect<true>;
    owners: OwnersSelect<false> | OwnersSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    'tag-groups': TagGroupsSelect<false> | TagGroupsSelect<true>;
    'gallery-media': GalleryMediaSelect<false> | GalleryMediaSelect<true>;
    'logo-images': LogoImagesSelect<false> | LogoImagesSelect<true>;
    'map-images': MapImagesSelect<false> | MapImagesSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    currencies: CurrenciesSelect<false> | CurrenciesSelect<true>;
    admins: AdminsSelect<false> | AdminsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (Owner & {
        collection: 'owners';
      })
    | (Admin & {
        collection: 'admins';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface OwnerAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venue-bookings-requests".
 */
export interface VenueBookingsRequest {
  id: number;
  desiredVenue: number | Venue;
  date: string;
  start: string;
  end: string;
  email: string;
  phone: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues".
 */
export interface Venue {
  id: number;
  title?: string | null;
  owner: number | Owner;
  maxGuestsCount?: number | null;
  price?: Price;
  areaSize: AreaSize;
  benefits?: string | null;
  rating?: number | null;
  galleryImages?: (number | GalleryMedia)[] | null;
  tags?: (number | Tag)[] | null;
  activities?: (number | Activity)[] | null;
  cateringAndDrinks?: VenueOption;
  tablesAndSeating?: VenueOption;
  alcoholicBeverages?: VenueOption;
  restrooms?: VenueOption;
  musicAndAV?: VenueOption;
  allowedEvents?: VenueOption;
  accommodation?: VenueOption;
  parking?: VenueOption;
  event?: VenueOption;
  locations: (number | Location)[];
  map?: (number | null) | MapImage;
  /**
   * @minItems 2
   * @maxItems 2
   */
  geoCoords?: [number, number] | null;
  _title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owners".
 */
export interface Owner {
  id: number;
  name: string;
  isSuperHost?: boolean | null;
  logo?: (number | null) | LogoImage;
  venues?: {
    docs?: (number | Venue)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo-images".
 */
export interface LogoImage {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Price".
 */
export interface Price {
  value?: number | null;
  currency?: (number | null) | Currency;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies".
 */
export interface Currency {
  id: number;
  name: string;
  symbol: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AreaSize".
 */
export interface AreaSize {
  value: number;
  units: 'square-foot' | 'square-meter';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-media".
 */
export interface GalleryMedia {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  title: string;
  tagGroup: number | TagGroup;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tag-groups".
 */
export interface TagGroup {
  id: number;
  title: string;
  tags?: {
    docs?: (number | Tag)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VenueOption".
 */
export interface VenueOption {
  isAvailable?: boolean | null;
  additionalInfo?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: number;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "map-images".
 */
export interface MapImage {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "new-venue-requests".
 */
export interface NewVenueRequest {
  id: number;
  title?: string | null;
  companyName?: string | null;
  spaceName?: string | null;
  venueDescription?: string | null;
  address?: string | null;
  activities: (number | Activity)[];
  tags: (number | Tag)[];
  cancellationPolicy?: string | null;
  minimumCancellationDuration?: string | null;
  operationalHours?: string | null;
  pricingModel?: string | null;
  seatingCapacity?: string | null;
  diningCapacity?: string | null;
  standingCapacity?: string | null;
  contactInformation?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'venue-bookings-requests';
        value: number | VenueBookingsRequest;
      } | null)
    | ({
        relationTo: 'new-venue-requests';
        value: number | NewVenueRequest;
      } | null)
    | ({
        relationTo: 'venues';
        value: number | Venue;
      } | null)
    | ({
        relationTo: 'owners';
        value: number | Owner;
      } | null)
    | ({
        relationTo: 'activities';
        value: number | Activity;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'tag-groups';
        value: number | TagGroup;
      } | null)
    | ({
        relationTo: 'gallery-media';
        value: number | GalleryMedia;
      } | null)
    | ({
        relationTo: 'logo-images';
        value: number | LogoImage;
      } | null)
    | ({
        relationTo: 'map-images';
        value: number | MapImage;
      } | null)
    | ({
        relationTo: 'locations';
        value: number | Location;
      } | null)
    | ({
        relationTo: 'currencies';
        value: number | Currency;
      } | null)
    | ({
        relationTo: 'admins';
        value: number | Admin;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'owners';
        value: number | Owner;
      }
    | {
        relationTo: 'admins';
        value: number | Admin;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'owners';
        value: number | Owner;
      }
    | {
        relationTo: 'admins';
        value: number | Admin;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venue-bookings-requests_select".
 */
export interface VenueBookingsRequestsSelect<T extends boolean = true> {
  desiredVenue?: T;
  date?: T;
  start?: T;
  end?: T;
  email?: T;
  phone?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "new-venue-requests_select".
 */
export interface NewVenueRequestsSelect<T extends boolean = true> {
  title?: T;
  companyName?: T;
  spaceName?: T;
  venueDescription?: T;
  address?: T;
  activities?: T;
  tags?: T;
  cancellationPolicy?: T;
  minimumCancellationDuration?: T;
  operationalHours?: T;
  pricingModel?: T;
  seatingCapacity?: T;
  diningCapacity?: T;
  standingCapacity?: T;
  contactInformation?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues_select".
 */
export interface VenuesSelect<T extends boolean = true> {
  title?: T;
  owner?: T;
  maxGuestsCount?: T;
  price?: T | PriceSelect<T>;
  areaSize?: T | AreaSizeSelect<T>;
  benefits?: T;
  rating?: T;
  galleryImages?: T;
  tags?: T;
  activities?: T;
  cateringAndDrinks?: T | VenueOptionSelect<T>;
  tablesAndSeating?: T | VenueOptionSelect<T>;
  alcoholicBeverages?: T | VenueOptionSelect<T>;
  restrooms?: T | VenueOptionSelect<T>;
  musicAndAV?: T | VenueOptionSelect<T>;
  allowedEvents?: T | VenueOptionSelect<T>;
  accommodation?: T | VenueOptionSelect<T>;
  parking?: T | VenueOptionSelect<T>;
  event?: T | VenueOptionSelect<T>;
  locations?: T;
  map?: T;
  geoCoords?: T;
  _title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Price_select".
 */
export interface PriceSelect<T extends boolean = true> {
  value?: T;
  currency?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AreaSize_select".
 */
export interface AreaSizeSelect<T extends boolean = true> {
  value?: T;
  units?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VenueOption_select".
 */
export interface VenueOptionSelect<T extends boolean = true> {
  isAvailable?: T;
  additionalInfo?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "owners_select".
 */
export interface OwnersSelect<T extends boolean = true> {
  name?: T;
  isSuperHost?: T;
  logo?: T;
  venues?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T;
  tagGroup?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tag-groups_select".
 */
export interface TagGroupsSelect<T extends boolean = true> {
  title?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gallery-media_select".
 */
export interface GalleryMediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo-images_select".
 */
export interface LogoImagesSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "map-images_select".
 */
export interface MapImagesSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "currencies_select".
 */
export interface CurrenciesSelect<T extends boolean = true> {
  name?: T;
  symbol?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}